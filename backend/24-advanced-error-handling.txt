Advanced Error Handling
Handling empty responses

When a table references an entry in another table, this can create an additional layer of complexity that is open to errors.

Consider a database with a table for species that contains entries for dog, cat, hamster and pony, and then a table for pets where each pet has a species property that references the species table.

For an endpoint like GET /api/pets?species=[speciesHere], where the user wants all of the pets that match the provided species, there are a few situations to consider:

    GET /api/pets?species=iDontExist: where the species used as a filter does not exist in our database. This should give a 404 status code response because the resource does not exist.
    GET /api/pets?species=iguana: here is a scenario where the species used as a filter does exist in our species table, but no pets reference this species. This should give a 200 status code and an empty array.

If the database receives either of the species queries in the examples above, it will always respond with an empty array. This is because, in both cases, the database has responded with all the data matching the query - none!

It’s essential to differentiate between when an empty array is appropriate to send back (when the query is valid but no resources associated with it) compared to when it’s appropriate instead to send back an error (when the query is invalid).

This will require a separate request to the database to verify if the referenced resource does indeed exist in the database or if it is an invalid query. It may be useful to extract this out into its own function:

const checkSpeciesExists = async (species) => {
  const dbOutput = await db.query(
    "SELECT * FROM species WHERE species_name = $1;",
    [species]
  );
  if (dbOutput.rows.length === 0) {
    // resource does NOT exist
    return Promise.reject({ status: 404, msg: "Species not found" });
  }
};

If the Promise.reject is triggered because there is no resource found in the database, this will immediately send the response to the controller’s catch block with the 404 error object that has been created. If the rejection is not triggered, then the query was valid, and it’s appropriate to send back an empty array.
Querying database columns

It would be good if this checkExists function was reusable, as it may later be used for different resources on the server. It would be ideal to pass in the table and column as variables and passing those into the database query.

It is possible to either pass these table/column variables into the query string using template literals, or make use of the pg-format package.

Note: Using template literals opens the query up to SQL injection, so it is very important that the table and column variables are not provided by the external user. Instead, the developer should pass in the strings for the table and column, and sanitise them if necessary.
pg-format

The pg-format package can be used to insert identifiers such as table or column names into our queries using %I:

// in utils.js
const format = require("pg-format");
const checkExists = async (table, column, value) => {
  const queryStr = format("SELECT * FROM %I WHERE %I = $1;", table, column);
  const dbOutput = await db.query(queryStr, [value]);
  if (dbOutput.rows.length === 0) {
    // resource does NOT exist
    return Promise.reject({ status: 404, msg: "Resource not found" });
  }
};

The checkExists function can then be reused in a model:

// in model.js
const selectPets = async ({ species }) => {
  if (!pets.length) {
    await checkExists("species", "species_name", species);
  }
};

Extracting util functions

In the example above, the checkExists function has been extracted into a file called utils.js. While the function is executed in the exact same manner, extracting it out into a separate file indicates that this is a reusable function.

Learn To Code
