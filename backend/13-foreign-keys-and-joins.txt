Foreign Keys and Joins

A foreign key is a field in one table that references the primary key in another table. The table containing the foreign key is the child table, and the table containing the primary key is the referenced or parent table.

Foreign keys and fields representing the same kind of data on different tables should be named consistently. Having student_id and staff_id or student_username and staff_username is preferable to having student_username and staff_user.
Example

In the below table, the favourite_animal_id column in the northcoders table is a foreign key that references the primary key of the animals table (animal_id):
northcoder_id
	
northcoder
	
favourite_animal_id
1
	
Rose
	
2
2
	
Kev
	
4
3
	
Ali
	
2
4
	
Rayhaan
	
3
Relationships
One-to-one relationships

A one-to-one relationship, sometimes denoted as 1:1, is where a record in one table is associated with exactly one record in another table.

Consider, for example, the association between a user and their password for a single site:
Hannah
QtZt7tYemS4K
Kev
password123
Scarlett
mtYKxqbF7YnD
One-to-many relationships

A one-to-many relationship (1:M) occurs when one resource in a table is related to one or many in another table.

This can be seen in the diagram below, where a single seminar lead might have a connection to multiple mentors:
Kev
Hannah
Rayhaan
Scarlett
Many-to-many relationships

A many-to-many (M:N) relationship may be formed when one resource will relate to one or many of another resource and, in turn, those resources can relate to one or many of the first resource.

Consider a diagram representing different mentors' favourite foods. Each mentor may have several different types of food that they enjoy, and in turn each type of food can be liked by multiple mentors:
Hannah
Pizza
Pasta
Kev
Salad
Curry
Scarlett
Junction Tables

A junction table allows a user to create a many-to-many relationship, where each record in the table will refer to a relationship between a record from each of the tables being referenced.

Consider a table called northcoders containing a unique id (northcoder_id) for each member of staff at Northcoders:
northcoder_id
	
northcoder
1
	
Rose
2
	
Kev
3
	
Ali
4
	
Rayhaan

As well as a skills table containing a list of unique skills:
skill_id
	
skill
	
difficulty
1
	
Chess
	
7
2
	
Eating
	
3
3
	
Sitting
	
2
4
	
Sleeping
	
1
5
	
JavaScript
	
6
6
	
HTML
	
3
7
	
CSS
	
10

A junction table, northcoders_skills, connecting the two would look like this:
northcoders_skills_id
	
northcoder_id
	
skill_id
1
	
1
	
1
2
	
1
	
4
3
	
1
	
7
4
	
2
	
5
5
	
2
	
2
6
	
3
	
1
7
	
4
	
5
8
	
4
	
4

The northcoders_skills table (conventionally named after the two tables that it forms a junction between) holds the information needed to store and maintain the many-to-many relationships between the two tables.

A junction table only needs to hold the references to the tables that it forms the many-to-many relationships between. Any additional information that is needed can be accessed from these tables through JOIN queries.
JOIN

JOIN clauses are used to combine records from two or more tables in a database.

There are several different join types in SQL:
INNER JOIN

An inner join is the most common type of join. It creates a new result table by combining column values of two tables (table1 and table2) based upon the join condition:

SELECT table1.column1, table2.column2...
FROM table1
INNER JOIN table2
ON table1.field = table2.field;

Note: The INNER keyword is optional. If just JOIN is used, this will default to an inner join.

The query compares each row of table1 with each row of table2 to find all pairs of rows that satisfy the join condition. When the join condition is satisfied, column values for each matched pair of rows of table1 and table2 are combined into a result row.
LEFT OUTER JOIN

For a left outer join, an inner join is performed and for each row in table1 that does not satisfy the join condition with any row in table2, a joined row is added with null values in columns of table2:

SELECT table1.column1, table2.column2...
FROM table1
LEFT OUTER JOIN table2
ON table1.field = table2.field;

This means that the joined table will always have at least one row for each row in table1.
RIGHT OUTER JOIN

For a right outer join, an inner join is performed and for each row in table2 that does not satisfy the join condition with any row in table1, a joined row is added with null values in columns of table1.

This is the converse of a left join; the result table will always have a row for each row in table2:

SELECT table1.column1, table2.column2...
FROM table1
RIGHT OUTER JOIN table2
ON table1.field = table2.field;

FULL OUTER JOIN

With a full outer join, an inner join is performed and for each row in table1 or table2 that does not satisfy the join condition with any row in the other table, a joined row is added with null values in columns of the other table:

SELECT table1.column1, table2.column2...
FROM table1
FULL OUTER JOIN table2
ON table1.field = table2.field;

CROSS JOIN

A cross join matches every row of the first table with every row of the second table. If the input tables have x and y columns respectively, the resulting table will have x+y columns.

Because cross joins have the potential to generate extremely large tables, care must be taken to use them only when appropriate:

SELECT table1.column1, table2.column2...
FROM table1
CROSS JOIN table2
ON table1.field = table2.field;

Learn To Code
