Error Handling

Handling errors that may occur from a client request is important for a server. Sometimes, these requests may attempt to access data that does not exist or fail to provide all of the information required to successfully complete the request.

In instances like this, it is important that a thrown error does not prevent the server from providing a response, and that the response contains information for the client about why the request was unsuccessful.
Common errors and status codes

The following is not a definitive list, but instead contains some of the more common status codes that should be sent back to the client under different circumstances:
General

    Attempting to access a non-existent endpoint (e.g. /notARoute): 404 Not Found

GET by ID

    Attempting to GET a resource by a valid ID that does not exist in the database (e.g. /api/resource/999999999): 404 Not Found
    Attempting to GET a resource by an invalid ID (e.g. /api/resource/notAnId): 400 Bad Request

POST

    Making a POST request with a body that does not contain the correct fields (e.g. /api/resource with a body of {}): 400 Bad Request
    Making a POST request with valid fields but the value of a field is invalid (e.g. /api/resource with a body of { rating_out_of_five: 6 } or { rating_out_of_five: "word" }): 400 Bad Request

DELETE by ID

    Attempting to DELETE a resource that does not exist (e.g. /api/resource/999999999): 404 Not Found
    Attempting to DELETE a resource referenced by an invalid ID (e.g. /api/resource/notAnId): 400 Bad Request

PATCH/PUT by ID

    Attempting to PATCH a resource with a body that does not contain the correct fields (e.g. /api/resource/:id with a body of {}): 400 Bad Request
    Attempting to PATCH a resource with valid body fields but invalid fields (e.g /api/resource/:id with a body of { increase_votes_by: "word" }): 400 Bad Request

Error-handling middleware

Error-handling middleware functions are defined in the same way as other middleware functions, except error-handling middleware functions have four arguments instead of three: (err, req, res, next). The number of arguments is used by Express to determine whether a middleware function is error-handling or not.

Invoking next() with no argument can be used to move onto the following middleware function, but next can also be used to pass an error to the next piece of error-handling middleware.
Passing an error

The first argument of an error-handling middleware function is the error that the next function inside the controller is invoked with.

For example, the below controller will invoke the next function if there is an error from the fetchPetsByOwnerId function, which will in turn invoke the error-handling middleware function inside app.js:

// controller.js
exports.getPetsByOwnerId = (req, res, next) => {
  const { ownerId } = req.params;
  fetchPetsByOwnerId(ownerId, (err, ownersPets) => {
    if (err) next(err);
    else res.status(200).send({ ownersPets: ownersPets });
  });
};

// app.js
app.get("/pets/:ownerId", getPetsByOwnerId)

app.use((err, req, res, next) => {
  console.log(err);
  res.status(500).send({ msg: "Server Error!"});
});

The benefit of being able to pass errors to specific error-handling functions, it that it saves duplicate code and allows concerns to be separated.

Express has a default error-handler for if another error-handling middleware function has not been defined, which by default will send a status 500 with whatever error that next has been invoked with.
Separate error-handling middleware functions

Error-handling middleware functions can quickly become complex and unwieldy. To manage this, it is good practice to split the error-handling logic between multiple error-handling blocks that will be responsible for dealing with different types of errors and responses.

Errors can be passed down these blocks using next(err) if the condition to send a specific error status and message is not met:

// app.js
app.use((err, req, res, next) => {
  if (err.status) {
    res.status(err.status).send({ msg: err.msg });
  } else next(err);
});

app.use((err, req, res, next) => {
  if (err.code === "22P02") {
    res.status(400).send({ msg: "Invalid input" });
  } else next(err);
});

app.use((err, req, res, next) => {
  console.log(err);
  res.status(500).send({ msg: "Internal Server Error" });
});
//...

Error-handling middleware functions can be further separated into a different file in order to keep the app tidy and maintain all of the error-handling logic in one place:

// app.js
const {
  handleCustomErrors,
  handleServerErrors
} = require("./errors/index.js");

app.use(handleCustomErrors);
app.use(handleServerErrors);

// errors/index.js
exports.handleCustomErrors = (err, req, res, next) => {
  if (err.status && err.msg) {
    res.status(err.status).send({ msg: err.msg });
  } else next(err);
};

exports.handleServerErrors = (err, req, res, next) => {
  console.log(err);
  res.status(500).send({ msg: "Internal Server Error" });
};

PostgreSQL errors

PostgreSQL throws errors which are assigned five-character error codes. These are not to be confused with HTTP status codes.

An example PostgreSQL error object looks similar to the following:

{
  error: 'invalid input syntax for integer: "notAnID"'
    at ...
  // ...
  name: 'error',
  length: 96,
  severity: 'ERROR',
  code: '22P02',
  // ...
}

Some common instances in which PostgreSQL may throw an error include:

    Missing required fields (NOT NULL violation)
    Invalid input
    Column name does not exist
    Table name does not exist

A full list of error codes can be found in the PostgreSQL documentation.
Handling PostgreSQL errors

Based on the error that has been thrown by PostgreSQL, an error-handling middleware function can be configured to send a custom response.

The code below would cause a response to be sent with a status 500 and an appropriate error message based on the PostgreSQL error code of 22P02.

// app.js
app.use((err, req, res, next) => {
  if (err.code === "22P02") {
    res.status(400).send({ msg: "Bad Request" });
  } else res.status(500).send({ msg: "Internal Server Error" });
});

Custom errors

In instances where PostgreSQL does not throw an error, but an error-status and message should be sent by the server, a custom error can be defined and thrown to the catch block for next to be invoked with.
Creating a custom error

An example where this may occur is when there is no error in the SQL query, but the query does not return any data/rows.

This can be identified in the model function, where the promise can be rejected with a custom error (including a status code and message) which would be caught by the .catch(next) block in the controller function:

// models/users.js
exports.selectUserById = (user_id) => {
  return db
    .query('SELECT * FROM users WHERE user_id = $1;', [user_id])
    .then(({ rows }) => {
      const user = rows[0];
      if (!user) {
        return Promise.reject({
          status: 404,
          msg: `No user found for user_id: ${user_id}`,
        });
      }
      return user;
    });
};

Handling the custom error

Once next is invoked with the custom error status code and message in the controller, the error is passed to the next error-handling middleware function, where the appropriate HTTP status and response can be sent based on what went wrong.

For example:

// app.js
app.use((err, req, res, next) => {
  // handle custom errors
  if (err.status && err.msg) {
    res.status(err.status).send({ msg: err.msg });
  } else {
    console.log(err);
    res.status(500).send({ msg: "Internal Server Error" });
  }
});

Testing errors

When it comes to testing errors, follow the normal test-driven development cycle (Red, Green, Refactor). Write a test, and watch it fail:

// app.test.js
test("status:400, responds with an error message when passed a bad user ID", () => {
  return request(app)
    .get("/api/users/notAnID")
    .expect(400)
    .then(({ body }) => {
      expect(body.msg).toBe("Invalid input");
    });
});

Once the test has failed, ensure that the controller function has a .catch block that will invoke next with any error that occurs in the promise chain:

// controllers/users.js
exports.sendUserById = (req, res, next) => {
  const { user_id } = req.params;
  selectUserById(user_id)
    .then((user) => res.status(200).send({ user }))
    .catch(next);
};

This will pass the error to the next error-handling middleware function:

// app.js
app.use((err, req, res, next) => {
  console.log(err);
  res.status(500).send({ msg: "Internal Server Error" });
});

Learn To Code
