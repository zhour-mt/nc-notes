React Hooks

Introduced in React v16.8, React Hooks are designed as a way to "hook" into React's lifecycle and access key features of React from within functional components. The React documentation for Hooks divides them into several categories:

    State Hooks
    Context Hooks
    Ref Hooks
    Effect Hooks
    Performance Hooks
    Other Hooks

Naming conventions

All Hooks start with the word use. React comes with some built-in Hooks, such as useState, but it is also possible to create custom Hooks.
Rules of Hooks

In addition to the naming convention rule, there are certain restrictions on how Hooks can be used:

    Only call Hooks from the top level: In order for React to use Hooks correctly, the same number of Hooks must be called in the same order on each re-render. For this reason, Hooks cannot be called from within if statements, for loops or nested functions.
    Only call Hooks from React functions: Hooks can be called from within React components or inside custom Hooks. This is for the same reason as above and ensures React knows about Hooks that are being used.

Learn To Code
