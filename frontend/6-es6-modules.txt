ES6 Modules

ES Modules is a modern module system that was introduced in ECMAScript 6 in 2015. Now widely supported by modern web browsers and Node, it provides a standardised way of modularising JavaScript code.
CommonJS vs ES Modules

There are a few differences between CommonJS, the default module system used by Node, and ES Modules:

    ES Modules loads imported modules asynchronously, whereas CommonJS loads them sychronously.
    In CommonJS, once a module is loaded it is cached in memory, and future requests returns the cached version. ES Modules does not cache by default, which can lead to additional requests for the same module.
    ES Modules supports dynamic imports with the import() syntax, allowing for imports to only be evaluated when needed.
    Whereas CommonJS uses module.exports and require, ES Modules uses an import and export syntax.

More information about ES6 Modules can be found in the MDN documentation for JavaScript modules.
Exporting modules
Default exports

ES6 Modules comes with the ability to export a single default value that can be imported in other files using export default:

function sayHello() {
  console.log("hello world");
}

export default sayHello;

In CommonJS, this would be equivalent to:

function sayHello() {
  console.log("hello world");
}

module.exports = sayHello;

Named exports

When exporting multiple values, each should be a named export using the export keyword:

export const foo = () => {};
export const bar = () => {};
export const baz = () => {};

In CommonJS, this would be the same as:

exports.foo = () => {};
exports.bar = () => {};
exports.baz = () => {};

Importing modules
Default imports

A default value from another file can imported using the import ... from syntax:

import foo from "./functions";

The name given to the imported modulecan be different to the one used in the original file, but it is good practice to keep them consistent for better code readability.
Named imports

Named imports can also be imported with the import ... from syntax, but they will need to be destructured from the imported module:

import { foo, bar, baz } from "./functions";

Alternatively, named exports can be collected into a single object that can be renamed using the as syntax:

import * as myFunctions from "./functions";

console.log(myFunctions); // { foo: [Function foo], bar: [Function bar], baz: [Function baz] }

myFunctions.foo();
myFunctions.bar();
myFunctions.baz();

Combining default and named exports

Unlike in CommonJS, it is possible to have both a default export as well as several named exports:

// myLibrary.js
function myLibrary() {}

export const helperFunction1 = () => {};
export const helperFunction2 = () => {};

export default myLibrary;

// another file
import myLibrary, { helperFunction1, helperFunction2 } from "./myLibrary";

Learn To Code
