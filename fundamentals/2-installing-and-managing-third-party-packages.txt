Installing and Managing Third-Party Packages

npm is a registry for JavaScript packages. Developers can share and use packages. npm also provides private development management for organisations.
package.json

Before using npm in a project, it is essential to create a package.json file. This file keeps track of all the packages that the project relies on, as well as other metadata.

Generating a package.json file using the command npm init will initiate a series of questions about the project.

To make this file using default settings, use the command npm init -y.
Using npm in a project

Install a package to a project by running the command npm install <package-name>. This will add the necessary libraries to the node_modules folder, and also add the library to the list of dependencies in the package.json file.

Some packages will only be required by the developer, not the end user. When installing a package which only the developer will be using (for example, testing frameworks that consumers won't encounter), then tag it as a developer dependency when installing it using the -D flag, i.e. npm install <package-name -D. This will add the package to the list of devDependencies.

npm install installs all the packages listed in the package.json file. Because the list of dependencies can get quite large for a project, it's a good idea to not have git track the node_module directory.

Instead, if a developer wishes to clone the project, they can use npm install (with no argument) to install all of the dependencies listed in the package.json from the npm registry. To tell git to ignore a file or directory, create a .gitignore file and list the files or directories to ignore.

If a specific version of a package hasn't been provided in the package.json, running npm update can update the dependencies to the latest available version.

To remove a package, run npm uninstall <package-name>. This will remove it from any dependencies in the package.json and remove the relevant files from the node_modules folder.
package-lock.json

This file is automatically generated when the command npm install is used to install packages, so there's rarely any need to edit it. For more information, read the docs.
npm scripts

In the package.json, the "scripts" property lists aliases for bash commands. To run a registered script with npm, execute npm run <script name>.

  "scripts": {
    "start": "node index.js"
  }

Running npm run start in this example runs the command on the key of "start" in the script section, i.e. node index.js.

Using scripts means it's not necessary to remember the intricacies of the file structure, and makes it easier to collaborate in repositories by having scripts written according to conventions.
Global versus local package installation

npm provides two options for installing packages: global and local. When a package is installed globally, it is available in any working directory, but when installed locally, it is only available in a particular working directory. It is recommended to install packages locally because different projects may require different package versions that are not compatible with others in the system. Installing libraries globally can also lead to projects not being self-contained, as they rely on libraries installed outside the project's scope, which are not listed in the "dependencies" or "devDependencies" section of the package.json file.

By default, all installations with npm are local. To install a package globally, use the global flag -g.

Learn To Code
