Coding Practices

Each company will have their own opinions about how coding and version control should be done depending on their needs. Some might use hosts other than GitHub, such as GitLab, or BitBucket - sometimes on their own servers too. They might not even use Git as their version control system - Mercurial and CVS are alternatives.

Nevertheless, certain coding conventions and version control practices can help to streamline the development process, particularly when working collaboratively with others.
Commit messages

Commit messages make it easier to understand why sections of code have been added to the codebase. Bad commit messages can make it difficult to work out work out what code is doing, why it was added, or even if it was needed.

To add a simple git commit message, use the following command: git commit -m "commit message subject".

As a general rule, commit messages should address a single purpose. If a commit message contains the word 'and', it likely should be two commits!

It is also good to write commit messages in the imperative, e.g. "Fix rendering bug" rather than "Fixed rendering bug" or "Fixes rendering bug". This convention matches up with commit messages generated by commands like git merge and git revert.
Branches

Branches are a better way to maintain responsibility within the codebase and make it easier to keep track of what features people are working on.

More information about branches can be found in the backend notes on Git Branches, including how to create pull requests and handle merge conflicts.
Branch protection

The main branch can be thought of as production-ready code. What this means may differ between different development teams, but it can be useful to treat it as code that could be deployed and would work fully within the limitations of whatever features were covered.

To prevent unfinished code from entering the main branch, branch protections can be added. As a minimum, requiring approvals on pull requests before merging is recommended. It's also a good idea to extend these restrictions to administrators - so nobody is above the law!

For GitHub, more information about branch protections can be found in the GitHub docs.
Rebasing

Rebasing is an alternative to merging. Instead of amalgamating two commit histories from two different branches, it restructures the commit history so that one branch's features appeared to have based from another. This is great for when two people are working on two branches from the same root simultaneously.

A visualisation of rebasing vs merging, as well as a look at some of the pros and cons, can be found in the Atlassian git tutorial.
Git hooks

Git hooks are scripts that allow specific actions to be performed upon certain triggers. These hooks can be client-side, such as committing and merging, or server-side, like receiving pushed commits.

Husky is an npm package that allows developers to easily add git hooks to a project, including actions such as linting commit messages or running tests.
Installing Husky

Husky can be installed using the following command:

npm install --save-dev husky

When installed, husky can be set up in a project by using:

npx husky init

This will create a new directory named .husky and add a new script to the package.json file:

{
  ...
  "script": {
    ...
    "prepare": "husky install";
  }
}

The .husky directory will contain a default pre-commit hook that will run npm test whenever a commit is made.
Adding hooks

New hooks can be added through the command line by running:

npx husky add .husky/pre-commit "<insert script here>"
git add .husky/pre-commit

When the new hook is commited, the specified script will run. If the script fails, the commit is also cancelled.

Multiple scripts can be added to the pre-commit hook as follows:

npx husky add .husky/pre-commit "npm test && eslint ./ --fix"

More information about Husky hooks can be found in the Husky documentation.
Linting

Linting is the automated process of checking source code for programmatic and sylistic errors.

ESLint is a popular linter, imposing a set of rules that written code must follow.
Setting up ESLint

ESLint can be installed and configured by running this command:

npm init @eslint/config@latest

Note: Using this command assumes that a project already has a package.json file. If it doesn't, be sure to run npm init beforehand.

More information about configuring ESLint can be found in the Getting Started section of their documentation.
Advantages

Using a linter will:

    Help to highlight syntax errors while writing code
    Ensure a more consistent approach to writing code across a development team
    Help to clean up commit history with consistency between single/double quotes

VSCode workspace settings

Visual Studio Code can be configured through a workspace settings file, allowing for features like format on save and Prettier to be configured by default. This makes it easier to standardise the editor preferences between different developers working on the same project.

More information about configuring workspace settings can be found in the Visual Studio Code docs.

Learn To Code
