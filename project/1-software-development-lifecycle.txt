Software Development Lifecycle

​The Software Development Lifecycle (SDLC) is a framework that defines the processes involved in the production of software. It was developed to help manage complex business systems in large corporations that required a lot of data processing and analysis.

One of the core aims is to produce the highest quality software in the shortest timeframe for the lowest cost.​

The SDLC lays out seven activities, or phases, that must happen with the creation of any piece of software.

Note: There are alternative definitions with five, six or seven phases.
​1. Feasibility Study

This phase, also referred to as the planning stage, involves assessing the feasibility of the product.

It focuses on the collaboration of key stakeholders to ensure that the following requirements for development can be met:​

    scheduling
    capacity planning
    cost estimation
    material and human resource allocation
    provisioning​

If the planning stage is successful, managers are able to produce detailed costs, plans and schedules.

In order to access the feasibility of a project, the following questions should be thoroughly examined:​

    Is it necessary?
    Is it affordable?
    Is it achievable?​

If a decision is made to proceed, there may be the additional question of whether the costs of developing will be recouped by the final product.
Cost-benefit analysis​

Assessing the feasibility of a product may involve weighing up the benefits of creating the product against the cost of development:

    What is the cost of providing the system?
    What money will be saved by creating and using the system?

Feasibility of a project is not always financial. Military defence systems may be considered a necessity regardless of the cost. Open-source software will focus on development for collaboration opportunities rather than the return on investment (ROI).
2. Requirements Analysis Stage

​Stakeholders and managers have to collaborate with the development team to communicate their requirements - finding out what the client wants the software to do.​

Specifications are important to the SDLC - errors in specifications can contribute greatly to testing and maintenance costs. Although specifications may be agreed at this stage, remember that specifications are not static, and they may adapt and change throughout the process as user requirements are further clarified.

​Ideally, specification requirements should demonstrate the following characteristics​:

    Implementation free - what is needed, not how it is achieved
    Complete - no areas missing
    Consistent - no individual requirements contradict another
    Unambiguous - each requirement has a single interpretation
    Concise - stated only once, without duplication
    Minimal - no fuss or extra ingredients
    Understandable - for both clients and developers
    Achievable - technically possible
    Testable - it can be demonstrated that the requirement is met​​

3. Design Stage​

The design stage will focus on how the system should set out to achieve the requirements. Ideally, it should consider the following key areas:

    architectural design
    user interface (UI) design​

Architectural design

Software systems can be large and complex, almost certainly too large to be written as one single program.

Architectural design breaks down the overall system into simpler modules. ​The high-level deliverable from the architectural design stage is a design solution or design specification.

From the user design stage, deliverables are more likely to be wireframes and prototypes.​
4. Code Development Stage

During this phase, code is written to meet the design specifications and building the software begins.

When code development starts, it is crucial that the initial information from previous stages is implemented, so that the output and created product aligns with stakeholders' and users' expectations.

​The deliverable from this stage is functional software that implements the designs and requirements of the client/user.​
5. Testing Stage​

During the testing phase, development teams should consider the following:​

    Is the product being built right?
    Is the right product being built?

When creating complex software projects, errors, bugs and glitches may slow down the release of the system, so testing is brought in to ensure “trust” in the product.​

This stage provides the security and reassurance that everything is working as expected. This stage also needs to determine whether the produced software meets the user's needs, and can be referred to as acceptance testing.

Acceptance testing will come when a product is deemed "complete". The product will be demonstrated to the client, and it is either signed off, or a list of agreed changes/faults may be created.​
6. Deployment/Implementation Stage​

If all has gone well with testing, the product is ready to be released and can be deployed. The actual methods of deploying software will vary greatly from company to company (and even team to team).​

Release managers may produce a deployment plan to get the product live. In more modern companies, this stage may be managed by CI/CD pipelines.​

Sometimes, deployment happens in phased stages, but the end product is an operational system in a live environment.​
7. Maintenance Stage​

When software is in use, it will require some form of maintenance to make sure it is functioning as it should.​

Once customers start using the developed system, the following 3 activities occur​:

    Bug fixing - bugs are reported because of some scenarios that were not previously tested
    Upgrades - Upgrading the application to newer versions of the software
    Enhancement - Adding new features into the existing software​

Benefits of SDLC

As a framework, SDLC can help in the development of a product by:

    Ensuring all stakeholders have a chance to give their input in the early stages of development.​
    Helping developers better understand what they are building and why.
    Shortening development timelines by preventing after-the-fact fixes.
    Lowering the overall cost of software development.
    Improving the quality of the software that the organisation delivers.

Drawbacks of SDLC

An overall strict adherence to the SDLC framework can also have negative consequences, such as:

    Reducing communication and collaboration across departments.
    Halting progress and creating information silos, owing to the linear nature of SDLC and the inability to move to the next phase until the current one is complete.

Learn To Code
